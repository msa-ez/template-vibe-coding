Please implement DDD-based microservice architecture code for an event storming model-based domain using Spring Boot 3 and DDD Extension. The code must be implemented strictly based on the metadata provided below:

{{namePascalCase}} Metadata:
{{{contexts.json}}}


<function>
var cache = []
const includingKeys = ["", "_type", "fieldDescriptors", "className", "displayName", "events", "aggregateRoot", "aggregates", "policies", "incomingRelations", "source", "commands", "readModels", "queryOption", "queryParameters", "actors", "name", "examples", "given", "when", "then", "value", "type", "controllerInfo", "isRestRepository", "restRepositoryInfo", "apiPath", "method", "fullApiPath", "lifeCycles", "trigger", "annotataion", "entities", "relations", "targetElement", "items"]

function customStringify(obj, cache = new Set(), parentType = null, parentKey = null, path = []) {
    if (obj === null || typeof obj !== 'object') {
        return JSON.stringify(obj);
    }

    // 빈 배열이거나 null인 경우 처리
    if (Array.isArray(obj) && obj.length === 0) {
        return null; // 나중에 제거를 위해 null 반환
    }

    if (cache.has(obj)) {
        return '{}'; // 순환 참조 처리
    }

    cache.add(obj);
    
    // 현재 경로 업데이트
    const currentPath = [...path];
    if (parentKey) currentPath.push(parentKey);

    if (Array.isArray(obj)) {
        const items = obj.map(item => customStringify(item, cache, parentType, parentKey, currentPath))
                        .filter(item => item !== null); // null 항목 필터링
        cache.delete(obj);
        
        // 필터링 후 빈 배열이 되면 null 반환
        if (items.length === 0) {
            return null;
        }
        
        return `[${items.join(',')}]`;
    }

    const pairs = [];
    for (const key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
            if (isNaN(key) && !includingKeys.includes(key)) continue;

            let value = obj[key];
            // null 값은 건너뛰기
            if (value === null) continue;
            
            // examples 내의 given/when/then 경로 확인
            const isExamplePath = path.includes('examples');
            const isWithinGivenWhenThen = isExamplePath && 
                (path.includes('given') || path.includes('when') || path.includes('then') || 
                 parentKey === 'given' || parentKey === 'when' || parentKey === 'then');
                 
            // given/when/then 경로 아래에 있지 않은 value는 건너뛰기
            if (key === 'value' && !isWithinGivenWhenThen) {
                continue;
            }
            
            if (key === 'incomingRelations' && !path.includes('policies')) {
                continue;
            }
            
            if (key === 'relations' && path.includes('entities') && path.includes('relations')) {
                continue;
            }
            
            if (key === 'fieldDescriptors' && path.includes('source')) {
                continue;
            }

            if (key === "_type" && typeof value === 'string' && value.indexOf('.') > 1) {
                value = value.split(".").pop();
            }

            // 재귀 호출 시 현재 객체의 타입과 키 정보, 경로 전달
            const stringifiedValue = customStringify(value, cache, obj.type || parentType, key, currentPath);
            
            if (stringifiedValue === null) continue;

            pairs.push(`"${key}":${stringifiedValue}`);
        }
    }

    cache.delete(obj);
    return pairs.length > 0 ? `{${pairs.join(',')}}` : null; // 빈 객체면 null 반환
}

// customStringify 함수 적용
this.contexts.json = customStringify(this);
</function>
