Please implement for this Event Storming Model:

{{{contexts.json}}}

It is necessary to create a DDD-based test file by referring to the given, when, then in the policies example.

I want to utilize following techniques:

- clean architecture
- spring-boot3
- spring-data-rest
- JPA (must use package jakarta.persistence.* instead of javax.persistence.*)
- H2 DB
- Lombok
- Kafka with spring-cloud-streams library 
- JUnit Test


SELF-CRITICISM: 
 - when you create pom.xml, USE correct parent project to spring boot 3
 - when you create pom.xml, you MUST specify the version: 3.1.3 ONLY for the spring-cloud-streams
 - Please generate start from pom.xml


when you create execution shell (run.sh), please add '--no-transfer-progress' option not to output transfer progress if there's mvn command:

```
mvn [command] --no-transfer-progress
```


<function>

var cache = []
const includingKeys = ["", "_type", "fieldDescriptors", "className", "displayName", "events", "aggregateRoot", "aggregates", "policies", "commands", "readModels", "queryOption", "queryParameters", "actors", "name", "examples", "given", "when", "then", "value", "type", "controllerInfo", "apiPath", "method", "fullApiPath"]

function customStringify(obj, cache = new Set()) {
    if (obj === null || typeof obj !== 'object') {
        return JSON.stringify(obj);
    }

    if (cache.has(obj)) {
        return '{}'; // 순환 참조 처리
    }

    cache.add(obj);

    if (Array.isArray(obj)) {
        const items = obj.map(item => customStringify(item, cache));
        cache.delete(obj);
        return `[${items.join(',')}]`;
    }

    const pairs = [];
    for (const key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
            if (isNaN(key) && !includingKeys.includes(key)) continue;

            let value = obj[key];
            if (key === "_type" && typeof value === 'string' && value.indexOf('.') > 1) {
                value = value.split(".").pop();
            }

            if (key === 'value' && (obj.type === 'Aggregate' || obj.type === 'Event')) {
                pairs.push(`"${key}":${JSON.stringify(value)}`);
            } else {
                pairs.push(`"${key}":${customStringify(value, cache)}`);
            }
        }
    }

    cache.delete(obj);
    return `{${pairs.join(',')}}`;
}

// customStringify 함수 적용
this.contexts.json = customStringify(this);

</function>
